{"version":3,"sources":["webpack:///./node_modules/semantic-ui-react/dist/es/elements/Button/ButtonContent.js","webpack:///./node_modules/semantic-ui-react/dist/es/elements/Button/ButtonGroup.js","webpack:///./node_modules/semantic-ui-react/dist/es/elements/Button/ButtonOr.js","webpack:///./node_modules/semantic-ui-react/dist/es/elements/Button/Button.js","webpack:///./src/pages/index.tsx","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js"],"names":["ButtonContent","props","children","className","content","hidden","visible","classes","classnames_default","Object","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","lib","isNil","handledProps","propTypes","Button_ButtonContent","ButtonGroup","attached","basic","buttons","color","compact","floated","fluid","icon","inverted","labeled","negative","positive","primary","secondary","size","toggle","vertical","widths","isNil_default","map_default","button","elements_Button_Button","create","Button_ButtonGroup","ButtonOr","text","data-text","Button_ButtonOr","Button_Button","_Component","Button","_getPrototypeOf2","_this","classCallCheck_default","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","apply","concat","defineProperty_default","assertThisInitialized_default","_this$props","label","_this$props2","disabled","tabIndex","invoke_default","ref","e","preventDefault","c","_this$props3","labelPosition","inherits_default","createClass_default","key","value","_this$props4","active","animated","circular","loading","role","baseClasses","hasIconClass","labeledClasses","wrapperClasses","computeElementType","computeTabIndex","buttonClasses","containerClasses","labelElement","Label","defaultProps","pointing","autoGenerateKey","onClick","handleClick","handleRef","Icon","hasChildren","undefined","react","as","factories","withLayout","Segment","textAlign","HeaderMenu","Link","pathname","location","items","menuItems","Container","Header","Grid","stackable","verticalAlign","Row","Column","width","columns","divided","relaxed","name","arrayWithoutHoles","__webpack_require__","iterableToArray","nonIterableSpread","module","exports","arr","isArray","i","arr2","iter","Symbol","iterator","prototype","toString","from","TypeError","GridColumn","computer","largeScreen","mobile","only","stretched","tablet","widescreen","Grid_GridColumn","GridRow","centered","reversed","Grid_GridRow","celled","container","doubling","padded","__webpack_exports__"],"mappings":"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","file":"component---src-pages-index-tsx-5fcaf2caa7755786a5f5.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * Used in some Button types, such as `animated`.\n */\n\nfunction ButtonContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      hidden = props.hidden,\n      visible = props.visible;\n  var classes = cx(useKeyOnly(visible, 'visible'), useKeyOnly(hidden, 'hidden'), 'content', className);\n  var rest = getUnhandledProps(ButtonContent, props);\n  var ElementType = getElementType(ButtonContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nButtonContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"hidden\", \"visible\"];\nButtonContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Initially hidden, visible on hover. */\n  hidden: PropTypes.bool,\n\n  /** Initially visible, hidden on hover. */\n  visible: PropTypes.bool\n} : {};\nexport default ButtonContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _map from \"lodash/map\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useValueAndKey, useWidthProp } from '../../lib';\nimport Button from './Button';\n/**\n * Buttons can be grouped.\n */\n\nfunction ButtonGroup(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      buttons = props.buttons,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      floated = props.floated,\n      fluid = props.fluid,\n      icon = props.icon,\n      inverted = props.inverted,\n      labeled = props.labeled,\n      negative = props.negative,\n      positive = props.positive,\n      primary = props.primary,\n      secondary = props.secondary,\n      size = props.size,\n      toggle = props.toggle,\n      vertical = props.vertical,\n      widths = props.widths;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(compact, 'compact'), useKeyOnly(fluid, 'fluid'), useKeyOnly(icon, 'icon'), useKeyOnly(inverted, 'inverted'), useKeyOnly(labeled, 'labeled'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(primary, 'primary'), useKeyOnly(secondary, 'secondary'), useKeyOnly(toggle, 'toggle'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useValueAndKey(floated, 'floated'), useWidthProp(widths), 'buttons', className);\n  var rest = getUnhandledProps(ButtonGroup, props);\n  var ElementType = getElementType(ButtonGroup, props);\n\n  if (_isNil(buttons)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), childrenUtils.isNil(children) ? content : children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(buttons, function (button) {\n    return Button.create(button);\n  }));\n}\n\nButtonGroup.handledProps = [\"as\", \"attached\", \"basic\", \"buttons\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"floated\", \"fluid\", \"icon\", \"inverted\", \"labeled\", \"negative\", \"positive\", \"primary\", \"secondary\", \"size\", \"toggle\", \"vertical\", \"widths\"];\nButtonGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Groups can be attached to other content. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['left', 'right', 'top', 'bottom'])]),\n\n  /** Groups can be less pronounced. */\n  basic: PropTypes.bool,\n\n  /** Array of shorthand Button values. */\n  buttons: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Groups can have a shared color. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Groups can reduce their padding to fit into tighter spaces. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Groups can be aligned to the left or right of its container. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** Groups can take the width of their container. */\n  fluid: PropTypes.bool,\n\n  /** Groups can be formatted as icons. */\n  icon: PropTypes.bool,\n\n  /** Groups can be formatted to appear on dark backgrounds. */\n  inverted: PropTypes.bool,\n\n  /** Groups can be formatted as labeled icon buttons. */\n  labeled: PropTypes.bool,\n\n  /** Groups can hint towards a negative consequence. */\n  negative: PropTypes.bool,\n\n  /** Groups can hint towards a positive consequence. */\n  positive: PropTypes.bool,\n\n  /** Groups can be formatted to show different levels of emphasis. */\n  primary: PropTypes.bool,\n\n  /** Groups can be formatted to show different levels of emphasis. */\n  secondary: PropTypes.bool,\n\n  /** Groups can have different sizes. */\n  size: PropTypes.oneOf(SUI.SIZES),\n\n  /** Groups can be formatted to toggle on and off. */\n  toggle: PropTypes.bool,\n\n  /** Groups can be formatted to appear vertically. */\n  vertical: PropTypes.bool,\n\n  /** Groups can have their widths divided evenly. */\n  widths: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default ButtonGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * Button groups can contain conditionals.\n */\n\nfunction ButtonOr(props) {\n  var className = props.className,\n      text = props.text;\n  var classes = cx('or', className);\n  var rest = getUnhandledProps(ButtonOr, props);\n  var ElementType = getElementType(ButtonOr, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes,\n    \"data-text\": text\n  }));\n}\n\nButtonOr.handledProps = [\"as\", \"className\", \"text\"];\nButtonOr.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Or buttons can have their text localized, or adjusted by using the text prop. */\n  text: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : {};\nexport default ButtonOr;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useValueAndKey } from '../../lib';\nimport Icon from '../Icon/Icon';\nimport Label from '../Label/Label';\nimport ButtonContent from './ButtonContent';\nimport ButtonGroup from './ButtonGroup';\nimport ButtonOr from './ButtonOr';\n/**\n * A Button indicates a possible user action.\n * @see Form\n * @see Icon\n * @see Label\n */\n\nvar Button =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Button, _Component);\n\n  function Button() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeElementType\", function () {\n      var _this$props = _this.props,\n          attached = _this$props.attached,\n          label = _this$props.label;\n      if (!_isNil(attached) || !_isNil(label)) return 'div';\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeTabIndex\", function (ElementType) {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          tabIndex = _this$props2.tabIndex;\n      if (!_isNil(tabIndex)) return tabIndex;\n      if (disabled) return -1;\n      if (ElementType === 'div') return 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"focus\", function () {\n      return _invoke(_this.ref, 'focus');\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      var disabled = _this.props.disabled;\n\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      _invoke(_this.props, 'onClick', e, _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleRef\", function (c) {\n      return _this.ref = c;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"hasIconClass\", function () {\n      var _this$props3 = _this.props,\n          labelPosition = _this$props3.labelPosition,\n          children = _this$props3.children,\n          content = _this$props3.content,\n          icon = _this$props3.icon;\n      if (icon === true) return true;\n      return icon && (labelPosition || childrenUtils.isNil(children) && _isNil(content));\n    });\n\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          active = _this$props4.active,\n          animated = _this$props4.animated,\n          attached = _this$props4.attached,\n          basic = _this$props4.basic,\n          children = _this$props4.children,\n          circular = _this$props4.circular,\n          className = _this$props4.className,\n          color = _this$props4.color,\n          compact = _this$props4.compact,\n          content = _this$props4.content,\n          disabled = _this$props4.disabled,\n          floated = _this$props4.floated,\n          fluid = _this$props4.fluid,\n          icon = _this$props4.icon,\n          inverted = _this$props4.inverted,\n          label = _this$props4.label,\n          labelPosition = _this$props4.labelPosition,\n          loading = _this$props4.loading,\n          negative = _this$props4.negative,\n          positive = _this$props4.positive,\n          primary = _this$props4.primary,\n          secondary = _this$props4.secondary,\n          role = _this$props4.role,\n          size = _this$props4.size,\n          toggle = _this$props4.toggle;\n      var baseClasses = cx(color, size, useKeyOnly(active, 'active'), useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(compact, 'compact'), useKeyOnly(fluid, 'fluid'), useKeyOnly(this.hasIconClass(), 'icon'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(primary, 'primary'), useKeyOnly(secondary, 'secondary'), useKeyOnly(toggle, 'toggle'), useKeyOrValueAndKey(animated, 'animated'), useKeyOrValueAndKey(attached, 'attached'));\n      var labeledClasses = cx(useKeyOrValueAndKey(labelPosition || !!label, 'labeled'));\n      var wrapperClasses = cx(useKeyOnly(disabled, 'disabled'), useValueAndKey(floated, 'floated'));\n      var rest = getUnhandledProps(Button, this.props);\n      var ElementType = getElementType(Button, this.props, this.computeElementType);\n      var tabIndex = this.computeTabIndex(ElementType);\n\n      if (!_isNil(label)) {\n        var buttonClasses = cx('ui', baseClasses, 'button', className);\n        var containerClasses = cx('ui', labeledClasses, 'button', className, wrapperClasses);\n        var labelElement = Label.create(label, {\n          defaultProps: {\n            basic: true,\n            pointing: labelPosition === 'left' ? 'right' : 'left'\n          },\n          autoGenerateKey: false\n        });\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: containerClasses,\n          onClick: this.handleClick\n        }), labelPosition === 'left' && labelElement, React.createElement(\"button\", {\n          className: buttonClasses,\n          disabled: disabled,\n          ref: this.handleRef,\n          tabIndex: tabIndex\n        }, Icon.create(icon, {\n          autoGenerateKey: false\n        }), \" \", content), (labelPosition === 'right' || !labelPosition) && labelElement);\n      }\n\n      var classes = cx('ui', baseClasses, wrapperClasses, labeledClasses, 'button', className);\n      var hasChildren = !childrenUtils.isNil(children);\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        disabled: disabled && ElementType === 'button' || undefined,\n        onClick: this.handleClick,\n        ref: this.handleRef,\n        role: role,\n        tabIndex: tabIndex\n      }), hasChildren && children, !hasChildren && Icon.create(icon, {\n        autoGenerateKey: false\n      }), !hasChildren && content);\n    }\n  }]);\n\n  return Button;\n}(Component);\n\n_defineProperty(Button, \"defaultProps\", {\n  as: 'button',\n  role: 'button'\n});\n\n_defineProperty(Button, \"Content\", ButtonContent);\n\n_defineProperty(Button, \"Group\", ButtonGroup);\n\n_defineProperty(Button, \"Or\", ButtonOr);\n\n_defineProperty(Button, \"handledProps\", [\"active\", \"animated\", \"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"fluid\", \"icon\", \"inverted\", \"label\", \"labelPosition\", \"loading\", \"negative\", \"onClick\", \"positive\", \"primary\", \"role\", \"secondary\", \"size\", \"tabIndex\", \"toggle\"]);\n\nButton.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A button can show it is currently the active user selection. */\n  active: PropTypes.bool,\n\n  /** A button can animate to show hidden content. */\n  animated: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['fade', 'vertical'])]),\n\n  /** A button can be attached to other content. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['left', 'right', 'top', 'bottom'])]),\n\n  /** A basic button is less pronounced. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: customPropTypes.every([PropTypes.node, customPropTypes.disallow(['label']), customPropTypes.givenProps({\n    icon: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.object.isRequired, PropTypes.element.isRequired])\n  }, customPropTypes.disallow(['icon']))]),\n\n  /** A button can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A button can have different colors */\n  color: PropTypes.oneOf(_toConsumableArray(SUI.COLORS).concat(['facebook', 'google plus', 'instagram', 'linkedin', 'twitter', 'vk', 'youtube'])),\n\n  /** A button can reduce its padding to fit into tighter spaces. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A button can show it is currently unable to be interacted with. */\n  disabled: PropTypes.bool,\n\n  /** A button can be aligned to the left or right of its container. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A button can take the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon />. */\n  icon: customPropTypes.some([PropTypes.bool, PropTypes.string, PropTypes.object, PropTypes.element]),\n\n  /** A button can be formatted to appear on dark backgrounds. */\n  inverted: PropTypes.bool,\n\n  /** Add a Label by text, props object, or pass a <Label />. */\n  label: customPropTypes.some([PropTypes.string, PropTypes.object, PropTypes.element]),\n\n  /** A labeled button can format a Label or Icon to appear on the left or right. */\n  labelPosition: PropTypes.oneOf(['right', 'left']),\n\n  /** A button can show a loading indicator. */\n  loading: PropTypes.bool,\n\n  /** A button can hint towards a negative consequence. */\n  negative: PropTypes.bool,\n\n  /**\n   * Called after user's click.\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /** A button can hint towards a positive consequence. */\n  positive: PropTypes.bool,\n\n  /** A button can be formatted to show different levels of emphasis. */\n  primary: PropTypes.bool,\n\n  /** The role of the HTML element. */\n  role: PropTypes.string,\n\n  /** A button can be formatted to show different levels of emphasis. */\n  secondary: PropTypes.bool,\n\n  /** A button can have different sizes. */\n  size: PropTypes.oneOf(SUI.SIZES),\n\n  /** A button can receive focus. */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** A button can be formatted to toggle on and off. */\n  toggle: PropTypes.bool\n} : {};\nButton.create = createShorthandFactory(Button, function (value) {\n  return {\n    content: value\n  };\n});\nexport default Button;","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport HeaderMenu from \"../components/HeaderMenu/HeaderMenu\";\nimport { withLayout, LayoutProps, menuItems } from \"../components/Layout\";\nimport {\n  Button,\n  Segment,\n  Container,\n  Grid,\n  Header,\n  Icon,\n} from \"semantic-ui-react\";\n\nconst IndexPage = (props: LayoutProps) =>\n  <div>\n    {/* Master head */}\n    <Segment vertical inverted textAlign=\"center\" className=\"masthead\">\n      <HeaderMenu\n        Link={Link} pathname={props.location.pathname} items={menuItems} inverted\n      />\n      <Container text>\n        <Header inverted as=\"h1\">Gatsby 2.0 - Starter kit</Header>\n        <Header inverted as=\"h2\">Typescript - Jest - Semantic UI</Header>\n        <Button primary size=\"huge\">Get started!</Button>\n      </Container>\n    </Segment>\n\n    {/* About this starter */}\n    <Segment vertical className=\"stripe\">\n      <Grid stackable verticalAlign=\"middle\" className=\"container\">\n        <Grid.Row>\n          <Grid.Column width=\"8\">\n            <Header>Lorem ipsum</Header>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                  Porro laudantium ad, quae, perspiciatis ipsa distinctio.\n                </p>\n            <Header>Dolor sit amet</Header>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                  Porro laudantium ad, quae, perspiciatis ipsa distinctio.\n                </p>\n          </Grid.Column>\n          <Grid.Column width=\"6\" floated=\"right\">\n            {/* TODO replace with a pretty GIF */}\n            <Header>Lorem ipsum</Header>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                  Porro laudantium ad, quae, perspiciatis ipsa distinctio.\n                </p>\n            <Header>Dolor sit amet</Header>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                  Porro laudantium ad, quae, perspiciatis ipsa distinctio.\n                </p>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n\n    {/* Key features */}\n    <Segment vertical className=\"stripe alternate feature\">\n      <Grid columns=\"3\" textAlign=\"center\" divided relaxed stackable className=\"container\">\n        <Grid.Row>\n          <Grid.Column>\n            <Header icon>\n              <Icon name=\"wizard\"></Icon>\n              A kind of magic!\n            </Header>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                  Voluptas eaque at quae cupiditate aspernatur quibusdam!\n                  Distinctio quod non, harum dolorum earum molestias,\n                  beatae expedita aliquam dolorem asperiores nemo amet quaerat.\n                </p>\n          </Grid.Column>\n          <Grid.Column>\n            <Header icon>\n              <Icon name=\"wizard\"></Icon>\n              A kind of magic!\n            </Header>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                  Voluptas eaque at quae cupiditate aspernatur quibusdam!\n                  Distinctio quod non, harum dolorum earum molestias,\n                  beatae expedita aliquam dolorem asperiores nemo amet quaerat.\n                </p>\n          </Grid.Column>\n          <Grid.Column>\n            <Header icon>\n              <Icon name=\"wizard\"></Icon>\n              A kind of magic!\n            </Header>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                  Voluptas eaque at quae cupiditate aspernatur quibusdam!\n                  Distinctio quod non, harum dolorum earum molestias,\n                  beatae expedita aliquam dolorem asperiores nemo amet quaerat.\n                </p>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  </div>;\n\nexport default withLayout(IndexPage);\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** Represents width of column. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf(_toConsumableArray(SUI.WIDTHS).concat(['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf(_toConsumableArray(SUI.WIDTHS).concat(['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;"],"sourceRoot":""}